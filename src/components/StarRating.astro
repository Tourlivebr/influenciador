---
export interface Props {
  rating: number;
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  showNumber?: boolean;
  class?: string;
}

const { 
  rating, 
  maxRating = 5, 
  size = 'md',
  showNumber = false,
  class: className = ''
} = Astro.props;

const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-5 h-5',
  lg: 'w-6 h-6'
};

const stars = Array.from({ length: maxRating }, (_, i) => {
  const starNumber = i + 1;
  const isFilled = starNumber <= rating;
  const isHalfFilled = starNumber - 0.5 === rating;
  
  return {
    number: starNumber,
    filled: isFilled,
    halfFilled: isHalfFilled
  };
});
---

<div class={`flex items-center gap-1 ${className}`} role="img" aria-label={`${rating} de ${maxRating} estrelas`}>
  {stars.map((star) => (
    <svg 
      class={`${sizeClasses[size]} ${star.filled ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`}
      fill="currentColor" 
      viewBox="0 0 20 20"
      aria-hidden="true"
    >
      {star.halfFilled ? (
        <defs>
          <linearGradient id={`half-${star.number}`}>
            <stop offset="50%" stop-color="currentColor" class="text-yellow-400" />
            <stop offset="50%" stop-color="currentColor" class="text-gray-300 dark:text-gray-600" />
          </linearGradient>
        </defs>
      ) : null}
      <path 
        d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
        fill={star.halfFilled ? `url(#half-${star.number})` : 'currentColor'}
      />
    </svg>
  ))}
  
  {showNumber && (
    <span class="ml-1 text-sm text-gray-600 dark:text-gray-400 font-medium">
      {rating}
    </span>
  )}
</div>